<?php

namespace Proxy\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class File extends \Entity\File implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

        return parent::__set($name, $value);
    }



    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'hash', 'filePath', 'fileMd5', 'mimeType', 'size', 'dateCreate', 'id', 'em', 'config');
        }

        return array('__isInitialized__', 'hash', 'filePath', 'fileMd5', 'mimeType', 'size', 'dateCreate', 'id', 'em', 'config');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (File $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function preInsert()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preInsert', array());

        return parent::preInsert();
    }

    /**
     * {@inheritDoc}
     */
    public function setHash($hash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHash', array($hash));

        return parent::setHash($hash);
    }

    /**
     * {@inheritDoc}
     */
    public function getHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHash', array());

        return parent::getHash();
    }

    /**
     * {@inheritDoc}
     */
    public function setFilePath($filePath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFilePath', array($filePath));

        return parent::setFilePath($filePath);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilePath', array());

        return parent::getFilePath();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullFilePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullFilePath', array());

        return parent::getFullFilePath();
    }

    /**
     * {@inheritDoc}
     */
    public function fileExists()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fileExists', array());

        return parent::fileExists();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileMd5($fileMd5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileMd5', array($fileMd5));

        return parent::setFileMd5($fileMd5);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileMd5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileMd5', array());

        return parent::getFileMd5();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', array($mimeType));

        return parent::setMimeType($mimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', array());

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setSize($size)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSize', array($size));

        return parent::setSize($size);
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', array());

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreate(\Zend_Date $dateCreate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreate', array($dateCreate));

        return parent::setDateCreate($dateCreate);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreate', array());

        return parent::getDateCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $args)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', array($method, $args));

        return parent::__call($method, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function fromArray(array $values)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fromArray', array($values));

        return parent::fromArray($values);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfig()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfig', array());

        return parent::getConfig();
    }

    /**
     * {@inheritDoc}
     */
    public function setConfig(\Zend_Config $config)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConfig', array($config));

        return parent::setConfig($config);
    }

    /**
     * {@inheritDoc}
     */
    public function getEm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEm', array());

        return parent::getEm();
    }

    /**
     * {@inheritDoc}
     */
    public function setEm(\Doctrine\ORM\EntityManager $em)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEm', array($em));

        return parent::setEm($em);
    }

}
